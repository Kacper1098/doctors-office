// <auto-generated />
using System;
using DoctorsOffice.DbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DoctorsOffice.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DoctorsOffice.DbModels.Doctor", b =>
                {
                    b.Property<string>("Pwz")
                        .HasColumnType("text");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Pwz");

                    b.HasIndex("FacilityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Patient", b =>
                {
                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("IdentityNumber");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorPwz")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPwz");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorPwz")
                        .HasColumnType("text");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientIdentityNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPwz");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PatientIdentityNumber");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Doctor", b =>
                {
                    b.HasOne("DoctorsOffice.DbModels.Facility", "Facility")
                        .WithMany("Doctors")
                        .HasForeignKey("FacilityId");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Schedule", b =>
                {
                    b.HasOne("DoctorsOffice.DbModels.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorPwz");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Visit", b =>
                {
                    b.HasOne("DoctorsOffice.DbModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorPwz");

                    b.HasOne("DoctorsOffice.DbModels.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("DoctorsOffice.DbModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientIdentityNumber");

                    b.Navigation("Doctor");

                    b.Navigation("Facility");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Doctor", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DoctorsOffice.DbModels.Facility", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
